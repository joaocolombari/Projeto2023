
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_LITE_riscvsingle(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [3:0] Result;
function [6:0] hexa27seg (input [3:0] hexa, input blank);
// Declaration of local variables
begin
// function code
	if (blank)
		hexa27seg = 7'b1111111;
	else
		hexa27seg = (hexa == 4'h0) ? 7'b1000000 :
		(hexa == 4'h1) ? 7'b1111001 :
		(hexa == 4'h2) ? 7'b0100100 :
		(hexa == 4'h3) ? 7'b0110000 :
		(hexa == 4'h4) ? 7'b0011001 :
		(hexa == 4'h5) ? 7'b0010010 :
		(hexa == 4'h6) ? 7'b0000010 :
		(hexa == 4'h7) ? 7'b1111000 :
		(hexa == 4'h8) ? 7'b0000000 :
		(hexa == 4'h9) ? 7'b0010000 :
		(hexa == 4'hA) ? 7'b0001000 :
		(hexa == 4'hB) ? 7'b0000011 :
		(hexa == 4'hC) ? 7'b1000110 :
		(hexa == 4'hD) ? 7'b0100001 :
		(hexa == 4'hE) ? 7'b0000110 :
		7'b0001110;
	end
endfunction

//=======================================================
//  Structural coding
//=======================================================

adder #(.width(4)) uut (.a(SW[7:4]), .b(SW[3:0]),.y(Result));

//a (SW[9])
assign HEX5[7] = 1'b1;
assign HEX5[6:0] = hexa27seg({3'h0, SW[9]}, 1'b0);

//a (SW[8:5])
assign HEX4[7] = 1'b1;
assign HEX4[6:0] = hexa27seg(SW[8:5], 1'b0);

//b (SW[4])
assign HEX3[7] = 1'b1;
assign HEX3[6:0] = hexa27seg({3'h0, SW[4]}, 1'b0);

//b (SW[3:0])
assign HEX2[7] = 1'b1;
assign HEX2[6:0] = hexa27seg(SW[3:0], 1'b0);

//y (Result[4]
assign HEX1[7] = 1'b1;
assign HEX1[6:0] = hexa27seg({3'h0, Result[4]}, 1'b0);

//y (Result[3:0])
assign HEX0[7] = 1'b1;
assign HEX0[6:0] = hexa27seg(Result[3:0], 1'b0);


endmodule